#!/bin/bash
#
# yakuake-session - A script to create new Yakuake sessions from command-line.
#
# Copyright 2010-2015 Jes√∫s Torres <jmtorres@ull.es>
#
# yakuake-session comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
# This is free software, and you are welcome to redistribute it
# under certain conditions; see COPYING for details.
#

### Utility functions
# A few utility functions to show errors, handle programa exit and more

PROGRAM_NAME="$(basename "$0")"
SESSION_FILE=''

# Show information about how to use this program 
function show_help() {
	cat <<-EOF

	Usage: $PROGRAM_NAME [options] [args]

	Options:
	  --help                    Show help about options.
	  -h, --homedir             Set the working directory of the new tab to the user's home.
	  -w, --workdir <dir>       Set the working directory of the new tab to 'dir'
	  --hold, --noclose         Do not close the session automatically when the command ends.
	  -p <property=value>       Change the value of a profile property (only for KDE 4).
	  -e <cmd>                  Command to execute.
	  -q                        Do not open yakuake window.
	  -t <title>                Set the title of the new tab

	Arguments:
	  args                      Arguments passed to command.
	EOF
}

# Show an error message and end the program
function error_exit() {
	echo "$PROGRAM_NAME: error: ${2:-"unknown error"}" 1>&2
	exit "${1:-1}"
}

# Show a warning message
function warning() {
	echo "$PROGRAM_NAME: warning: ${1:-"unknown error"}" 1>&2
}

### Profile setup
# Functions to handle terminal profile properties and setup
# them in the new session.

profile_properties=''

function add_profile_setting() {
	if [[ -z "$profile_properties" ]]; then
		profile_properties="$1"
	else
		profile_properties="$profile_properties;$1"
	fi
}

function profile_setup_command() {
	type -P konsoleprofile &> /dev/null || echo 'true'
	if [[ -n "$profile_properties" ]]; then
		echo "konsoleprofile '$profile_properties'"
	else
		echo 'true'
	fi
}

### Yakuake IPC
# Functions to make it easy to invoke some Yakuake methods

# Detect which IPC technology we have to use to talk to Yakuake
function detect_ipc_interface() {
	type -P qdbus &> /dev/null && \
		qdbus 2> /dev/null | grep -q org.kde.yakuake
	if [[ "$?" == 0 ]]; then
		echo dbus
		return
	fi
	type -P dcop &> /dev/null && \
		dcop 2> /dev/null | grep -q yakuake
	if [[ "$?" == 0 ]]; then
		echo dcop
		return
	fi
	echo none
}

# Initialize IPC interface to Yakuake
function init_ipc_interface() {
	local comm=$(detect_ipc_interface)
	if [[ "$comm" == none ]]; then
		# Maybe Yakuake is not running. Launch de program and try it again
		type -P yakuake &> /dev/null ||
			error_exit 20 "Yakuake is not installed"
		yakuake &> /dev/null ||
			error_exit 126 "Yakuake can not be executed: exit with status $?"
		comm=$(detect_ipc_interface)
	fi

	if [[ "$comm" == dbus ]]; then
		function yakuake_addsession() {
			qdbus org.kde.yakuake /yakuake/sessions addSession > /dev/null
		}

		function yakuake_runcommand() {
			qdbus org.kde.yakuake /yakuake/sessions runCommand "$1" > /dev/null
		}

		function yakuake_hasinterface() {
			qdbus org.kde.yakuake /yakuake/MainWindow_1 Introspect |
				grep -F "<interface name=\"$1\">"
		}

		function yakuake_settitle() {
			local id="$(qdbus org.kde.yakuake /yakuake/sessions sessionIdList |
				tr , "\n" | sort -g | tail -1 | tr -d '\n')"
			qdbus org.kde.yakuake /yakuake/tabs setTabTitle "$id" "$1" 
		}

		function yakuake_showwindow() {
			yakuake_hasinterface com.trolltech.Qt.QWidget
			if [[ "$?" == 0 ]]; then
				local interface="com.trolltech.Qt.QWidget"
			else
				local interface="org.qtproject.Qt.QWidget"
			fi
			local ws="$(qdbus org.kde.yakuake /yakuake/MainWindow_1 Get "$interface" visible)"
			if [[ "$?" == 0 && "$ws" == "false" ]]; then
				qdbus org.kde.yakuake /yakuake/window toggleWindowState > /dev/null
			fi
		}
	elif [[ "$comm" == dcop ]]; then
		function yakuake_addsession() {
			dcop yakuake DCOPInterface slotAddSession > /dev/null
		}

		function yakuake_runcommand() {
			dcop yakuake DCOPInterface slotRunCommandInSession "$1" > /dev/null
		}

		function yakuake_settitle() {
			warning "set tab title is not yet supported when using DCOP interface"
		}

		function yakuake_showwindow() {
			ws="$(dcop yakuake yakuake-mainwindow#1 visible)"
			if [[ "$?" == 0 && "$ws" == false ]]; then
				dcop yakuake DCOPInterface slotToggleState > /dev/null
			fi
		}
	else
		error_exit 22 "cannot connect to Yakuake"
	fi
}

### Main function

function yakuake_session() {
	local cwd="$PWD"
	local title=''
	local cmd=''
	local args=''
	local hold=0
	local now=1
	local opts=''

	# Parse command line options
	opts=$(getopt -n "$PROGRAM_NAME" -o t:e:p:w:hq \
		-l workdir:,hold,noclose,help -- "$@")
	eval set -- "$opts"
	while true; do
		case "$1" in
			--help) show_help; exit 0 ;;
			-w|--workdir) cwd="$2"; shift 2 ;;
			--hold|--noclose) hold=1; shift ;;
			-p) add_profile_setting "$2"; shift 2 ;;
			-e) cmd="$2"; shift 2 ;;
			-t) title="$2"; shift 2 ;;
			-h|--homedir) cwd="$HOME"; shift ;;
			-q) now=0; shift ;;
			--) shift; break ;;
			*) error_exit 1 "internal error";;
		esac
	done
	for arg do args="$args $arg" ; done

	if [[ -n "$cwd" && ! -d "$cwd" ]] ; then
		error_exit 2 "working directory does not exist"
	fi

	if [[ -n "$cmd" ]]; then
		type -P "$cmd" &> /dev/null || error_exit 127 "command not found"
		if [[ "$hold" == 1 ]]; then
			cmd="'$cmd' $args"
		else
			cmd="exec '$cmd' $args"
    		fi
	else
		cmd='true'
	fi

	init_ipc_interface

	# Create a new terminal session in Yakuake
	yakuake_addsession > /dev/null ||
		error_exit 4 'cannot create a new session in Yakuake'
	if [[ -n "$title" ]]; then
		yakuake_settitle "$title"
	fi

	# Setup the session 
	SESSION_FILE="$(mktemp --tmpdir "$PROGRAM_NAME-XXXXXXXXXX")"

	cat > "$SESSION_FILE" <<-EOF
	clear
	$(profile_setup_command) && cd `printf %q "$cwd"` && $cmd
	rm -f '$SESSION_FILE' &> /dev/null
	EOF

	# We put a space before the command to exclude it from history
	yakuake_runcommand " . '$SESSION_FILE'" ||
		error_exit 7 'cannot run a command inside the new session'
	
	# Show the window of Yakuake
	if [[ "$now" == 1 ]]; then
		yakuake_showwindow
	fi
}

yakuake_session "$@"
